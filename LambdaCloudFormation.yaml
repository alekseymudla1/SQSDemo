AWSTemplateFormatVersion: 2010-09-09
Description: "cloudFormation demo"

Parameters:
  Environment:
    Description: Environment Name
    Type: String
    
Resources: 
  lambdaFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub booksdemo-lambda-policy${Environment}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogsEvents"
                Resource: "*"
        - PolicyName: !Sub booksdemo-lambda-policy-s3${Environment}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - s3:PutAnalyticsConfiguration
                  - s3:PutAccessPointConfigurationForObjectLambda
                  - s3:GetObjectVersionTagging
                  - s3:DeleteAccessPoint
                  - s3:CreateBucket
                  - s3:DeleteAccessPointForObjectLambda
                  - s3:GetStorageLensConfigurationTagging
                  - s3:ReplicateObject
                  - s3:GetObjectAcl
                  - s3:GetBucketObjectLockConfiguration
                  - s3:DeleteBucketWebsite
                  - s3:GetIntelligentTieringConfiguration
                  - s3:PutLifecycleConfiguration
                  - s3:GetObjectVersionAcl
                  - s3:DeleteObject
                  - s3:CreateMultiRegionAccessPoint
                  - s3:GetBucketPolicyStatus
                  - s3:GetObjectRetention
                  - s3:GetBucketWebsite
                  - s3:GetJobTagging
                  - s3:GetMultiRegionAccessPoint
                  - s3:PutReplicationConfiguration
                  - s3:GetObjectAttributes
                  - s3:PutObjectLegalHold
                  - s3:InitiateReplication
                  - s3:GetObjectLegalHold
                  - s3:GetBucketNotification
                  - s3:PutBucketCORS
                  - s3:DescribeMultiRegionAccessPointOperation
                  - s3:GetReplicationConfiguration
                  - s3:ListMultipartUploadParts
                  - s3:PutObject
                  - s3:GetObject
                  - s3:PutBucketNotification
                  - s3:DescribeJob
                  - s3:PutBucketLogging
                  - s3:GetAnalyticsConfiguration
                  - s3:PutBucketObjectLockConfiguration
                  - s3:GetObjectVersionForReplication
                  - s3:GetAccessPointForObjectLambda
                  - s3:GetStorageLensDashboard
                  - s3:CreateAccessPoint
                  - s3:GetLifecycleConfiguration
                  - s3:GetInventoryConfiguration
                  - s3:GetBucketTagging
                  - s3:PutAccelerateConfiguration
                  - s3:GetAccessPointPolicyForObjectLambda
                  - s3:DeleteObjectVersion
                  - s3:GetBucketLogging
                  - s3:ListBucketVersions
                  - s3:RestoreObject
                  - s3:ListBucket
                  - s3:GetAccelerateConfiguration
                  - s3:GetObjectVersionAttributes
                  - s3:GetBucketPolicy
                  - s3:PutEncryptionConfiguration
                  - s3:GetEncryptionConfiguration
                  - s3:GetObjectVersionTorrent
                  - s3:AbortMultipartUpload
                  - s3:GetBucketRequestPayment
                  - s3:GetAccessPointPolicyStatus
                  - s3:UpdateJobPriority
                  - s3:GetObjectTagging
                  - s3:GetMetricsConfiguration
                  - s3:GetBucketOwnershipControls
                  - s3:DeleteBucket
                  - s3:PutBucketVersioning
                  - s3:GetBucketPublicAccessBlock
                  - s3:GetMultiRegionAccessPointPolicyStatus
                  - s3:ListBucketMultipartUploads
                  - s3:PutIntelligentTieringConfiguration
                  - s3:GetMultiRegionAccessPointPolicy
                  - s3:GetAccessPointPolicyStatusForObjectLambda
                  - s3:PutMetricsConfiguration
                  - s3:PutBucketOwnershipControls
                  - s3:DeleteMultiRegionAccessPoint
                  - s3:UpdateJobStatus
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetAccessPointConfigurationForObjectLambda
                  - s3:PutInventoryConfiguration
                  - s3:GetObjectTorrent
                  - s3:GetStorageLensConfiguration
                  - s3:DeleteStorageLensConfiguration
                  - s3:PutBucketWebsite
                  - s3:PutBucketRequestPayment
                  - s3:PutObjectRetention
                  - s3:CreateAccessPointForObjectLambda
                  - s3:GetBucketCORS
                  - s3:GetBucketLocation
                  - s3:GetAccessPointPolicy
                  - s3:ReplicateDelete
                  - s3:GetObjectVersion
                Resource: 
                  - Fn::ImportValue:
                      Fn::Sub: booksDemoS3Arn${Environment}
                  - Fn::Join:
                    - ""
                    - 
                      - Fn::ImportValue:
                          Fn::Sub: booksDemoS3Arn${Environment}
                      - /*
              - Effect: Allow
                Action:
                  - s3:ListJobs
                  - s3:ListAccessPointsForObjectLambda
                  - s3:ListMultiRegionAccessPoints
                  - s3:PutStorageLensConfiguration
                  - s3:ListAccessPoints
                  - s3:CreateJob
                  - s3:ListStorageLensConfigurations
                  - s3:GetAccessPoint
                  - s3:ListAllMyBuckets
                  - s3:GetAccountPublicAccessBlock
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:GetQueueUrl
                  - sqs:ListDeadLetterSourceQueues
                  - sqs:ReceiveMessage
                  - sqs:GetQueueAttributes
                  - sqs:ListQueueTags
                  - sqs:DeleteMessage
                Resource:
                  Fn::ImportValue:
                    Fn::Sub: booksDemoSQSArn${Environment}
                
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: CloudFormation demo lambda
      FunctionName: !Sub books-demo-log-${Environment}
      Handler: SQSDemo::SQSDemo.Function::FunctionHandler
      MemorySize: 128
      Role: !GetAtt lambdaFunctionIamRole.Arn
      Runtime: dotnetcore3.1
      Timeout: 20
      Environment:
        Variables:
          S3LogBucket:
            Fn::ImportValue:
              Fn::Sub: booksDemoS3Name${Environment}
      Code:
        S3Bucket: demo-loudformation-packages 
        S3Key: booksDemoLambda.zip

  EventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::ImportValue:
          Fn::Sub: booksDemoSQSArn${Environment}
      FunctionName: !GetAtt lambdaFunction.Arn
      BatchSize: 10
      Enabled: true
